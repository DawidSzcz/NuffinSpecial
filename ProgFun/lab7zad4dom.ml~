(*Dawid Szczyrk*)

(*4*)
module type DICTIONARY = 
sig
type key
type 'a t
exception DuplicatedKey of int      (* error in insert *)
val empty: unit -> 'a t
(* empty dictionary *)
val lookup: 'a t -> key -> 'a option
val insert: 'a t -> key * 'a -> 'a t
val delete: 'a t -> key -> 'a t  
val update: 'a t -> key * 'a -> 'a t
(* not necessary *)
end;;


module Dictionary : DICTIONARY =
struct
  type 'a t = (int * 'a) list
  exception DuplicatedKey of int      (* error in insert *)
  let empty() = []
  let rec  insert dic (key, el) =
      match dic with
        [] -> [(key, el)]
      | ((k, e)::t) when key < k -> (key,el)::dic
      | ((k, e)::t) when key = k ->raise(Duplicated k) 
      | ((k, e)::t) -> (k,e)::(insert t(key,el))

  let rec lookup dic key =
      match dic with
        [] -> None
      | ((k, e)::t) when key < k -> lookup t key
      | ((k, e)::t) when key = k -> Some e
      | ((k, e)::t) -> None

end

let x = Dictionary.empty();;
